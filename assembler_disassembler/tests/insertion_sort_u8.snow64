.equ reg_dzero 0
.equ reg_du0 1
.equ reg_du1 2
.equ reg_du2 3
.equ reg_du3 4
.equ reg_du4 5
.equ reg_du5 6
.equ reg_du6 7
.equ reg_du7 8
.equ reg_du8 9
.equ reg_du9 10
.equ reg_du10 11
.equ reg_du11 12
.equ reg_dlr 13
.equ reg_dfp 14
.equ reg_dsp 15

.equ sysc_disp_regs 0
.equ sysc_disp_ddest_vector_data 1
.equ sysc_disp_ddest_scalar_data 2
.equ sysc_disp_ddest_addr 3
.equ sysc_finish 4

.equ num_bytes__size_8 (8 / 8)
.equ num_bytes__size_16 (16 / 8)
.equ num_bytes__size_32 (32 / 8)
.equ num_bytes__size_64 (64 / 8)


.equ offset_pcrel__right_after_call (2 * num_bytes__size_32)

start:
{
	// We don't need a pc-relative load in this case.
	ldu32 du0, dzero, dzero, __const__above_top_of_stack
	ldu8 dsp, dzero, du0, 0



	.equ __local_stack_space (1 * num_bytes__size_64)
	.equ __local_sp_offset__temp (0 * num_bytes__size_64)

	.equ __local_fp_offset__copy_of_main_ret_val \
		(-(1 * num_bytes__size_64))


	ldu8 dfp, dsp, dzero, 0
	ldu8 dsp, dsp, dzero, -__local_stack_space




	.equ __call_main_stack_space (2 * num_bytes__size_64)
	.equ __call_main_sp_offset__return_val (0 * num_bytes__size_64)
	.equ __call_main_sp_offset__return_addr (1 * num_bytes__size_64)


	ldu8 dsp, dsp, dzero, -__call_main_stack_space


	ldu64 dlr, dsp, dzero, __call_main_sp_offset__return_addr
	addis dlr, pc, offset_pcrel__right_after_call
	bra main


__after_call_main:
	// Restore dfp
	ldu8 dfp, dsp, dzero, (__call_main_stack_space + __local_stack_space)


	// Copy main()'s return value to outside the partial stack frame
	ldu64 du3, dfp, dzero, __local_fp_offset__copy_of_main_ret_val
	ldu64 du1, dsp, dzero, __call_main_sp_offset__return_val
	adds du3, dzero, du1


	// Restore dsp
	ldu8 dsp, dsp, dzero, __call_main_stack_space

__finish:
	sim_syscall du3, dzero, dzero, sysc_disp_ddest_scalar_data
	sim_syscall dzero, dzero, dzero, sysc_finish

__pool:
__const__above_top_of_stack:
	.db32 0x10000
__const__addr_of_main:
	.db32 main
}

main:
{
	.equ __stack_space (3 * num_bytes__size_64)
	.equ __sp_offset__temp_0 (0 * num_bytes__size_64)
	.equ __sp_offset__temp_1 (1 * num_bytes__size_64)
	.equ __sp_offset__temp_2 (2 * num_bytes__size_64)


	.equ __fp_offset__return_val (0 * num_bytes__size_64)
	.equ __fp_offset__return_addr (1 * num_bytes__size_64)
	ldu8 dfp, dsp, dzero, 0
	ldu8 dsp, dsp, dzero, -__stack_space


	ldu64 du0, dfp, dzero, __fp_offset__return_val
	ldu64 du1, dsp, dzero, __sp_offset__temp_0


	pcrels du1, __pool


__finish:
	ldu8 dsp, dsp, dzero, __stack_space
	jmp dlr

__pool:
}
