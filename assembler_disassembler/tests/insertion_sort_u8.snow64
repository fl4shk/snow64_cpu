start:
{
	ldu32 dsp, dzero, dzero, const__above_top_of_stack
	ldu8 dsp, dzero, dsp, 0

	bra main
}


global_vars:

global_constants:
const__above_top_of_stack:
	.db32 0x10000

const__start__data_to_sort:
	.db8 3, 2, 6, 1, 9, 9, 4
const__end__data_to_sort:
const__align__data_to_sort:
	.db8 0


.org 0x1000
main:
{
	ldu8 dfp, dsp, dzero, 0

	// Space for du0 and dlr
	ldu8 dsp, dsp, dzero, -(2 + 8)


	ldu16 du0, dsp, dzero, 0
	ldu64 dlr, dsp, dzero, 2


	pcrels du0, __constants
	ldu16 du1, dzero, du0, __const__addr__insertion_sort_u8 - __constants
	ldu16 du2, dzero, du0, __const__addr__start__data_to_sort - __constants
	ldu16 du3, dzero, du0, __const__addr__end__data_to_sort - __constants



	// Space for const__start__data_to_sort, const__end__data_to_sort
	ldu8 dsp, dsp, dzero, -(8 * 2)

	// first argument:  const__start__data_to_sort 
	ldu64 du0, dzero, dsp, 0
	adds du0, dzero, du2

	// second argument:
	// const__end__data_to_sort - const__start__data_to_sort
	ldu64 du0, dzero, dsp, 8
	subs du0, du3, du2


	// Call insertion_sort_u8
	pcrels dlr, __done
	jmp du1

__done:
	ldu8 dsp, dsp, dzero, (8 * 2)
	ldu8 dfp, dsp, dzero, (2 + 8)

__infin:
	bra __infin


__constants:
__const__addr__insertion_sort_u8:
	.db16 insertion_sort_u8

__const__addr__start__data_to_sort:
	.db16 const__start__data_to_sort

__const__addr__end__data_to_sort:
	.db16 const__end__data_to_sort

__const__align_thing:
	.db16 0
}



.org 0x4000
insertion_sort_u8:
{
	.equ __sp_offset__i (8 * 0)
	.equ __sp_offset__j (8 * 1)
	.equ __sp_offset__ucmp_64 (8 * 2)
	.equ __sp_offset__address_temp (8 * 3)
	.equ __sp_offset__ucmp_8 (8 * 4)
	.equ __stack_space__insertion_sort_u8 (8 * 5)

	ldu8 dfp, dsp, dzero, 0


	// Allocate space for local vars
	ldu8 dsp, dsp, dzero, -__stack_space__insertion_sort_u8



	// "i" in du0
	ldu64 du0, dsp, dzero, __sp_offset__i

	// "j" in du1
	ldu64 du1, dsp, dzero, __sp_offset__j

	// "ucmp_64" in du2
	ldu64 du2, dsp, dzero, __sp_offset__ucmp_64

	// "address_temp" in du3
	ldu8 du3, dsp, dzero, __sp_offset__address_temp

	// "ucmp_8_0" in du4
	ldu8 du4, dsp, dzero, (__sp_offset__ucmp_8 + 0)

	// "ucmp_8_1" in du5
	ldu8 du5, dsp, dzero, (__sp_offset__ucmp_8 + 1)


	// "&A" in du6
	ldu64 du6, dfp, dzero, -8

	// "length(A)" in du7
	ldu64 du7, dfp, dzero, 0




	// i <- 1;
	addis du0, dzero, 1

__loop_0:
	{
	// while (i < length(A))
		// du2 = (i < length(A));
		slts du2, du0, du7
		bfal du2, __after_loop_0

		// j <- i;
		adds du1, dzero, du0

	__loop_1:
		// while ((j != 0) && (A[j - 1] > A[j]))
		{
			// du2 = (j != 0);
			subs du2, du1, dzero

			// if (j == 0) goto __after_loop_1
			bfal du2, __after_loop_1


			// du3 = ((&A) + j);
			adds du3, du6, du1

			// du7 is A[j - 1]
			ldu8 du7, dzero, du3, -1

			// du8 is A[j]
			ldu8 du8, dzero, du3, 0


			// du4 = (A[j - 1] <= A[j]);
			slts du4, du7, du8
			subs du5, du7, du8
			orrs du4, du4, du5

			// if (A[j - 1] <= A[j]) goto __after_loop_1
			btru du4, __after_loop_1


			// swap(A[j - 1], A[j])

			// X = X ^ Y;
			xors du7, du7, du8

			// Y = Y ^ X;
			xors du8, du8, du7

			// X = X ^ Y;
			xors du7, du7, du8


			// j <- j - 1;
			addis du1, du1, -1
		}

	__after_loop_1:
		// i <- i + 1;
		addis du0, du0, 1
	}


__after_loop_0:



__return:
	// Deallocate local vars
	ldu8 dsp, dsp, dzero, __stack_space__insertion_sort_u8


	// return
	jmp dlr
}
