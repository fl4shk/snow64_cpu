.equ reg_dzero 0
.equ REG_DU0 1
.equ REG_DU1 2
.equ REG_DU2 3
.equ REG_DU3 4
.equ REG_DU4 5
.equ REG_DU5 6
.equ REG_DU6 7
.equ REG_DU7 8
.equ REG_DU8 9
.equ REG_DU9 10
.equ REG_DU10 11
.equ REG_DU11 12
.equ REG_DLR 13
.equ REG_DFP 14
.equ REG_DSP 15

.equ SYSC_DISP_REGS 0
.equ SYSC_DISP_DDEST_VECTOR_DATA 1
.equ SYSC_DISP_DDEST_SCALAR_DATA 2
.equ SYSC_DISP_DDEST_ADDR 3
.equ SYSC_FINISH 4

.equ NUM_BYTES__SIZE_8 (8 / 8)
.equ NUM_BYTES__SIZE_16 (16 / 8)
.equ NUM_BYTES__SIZE_32 (32 / 8)
.equ NUM_BYTES__SIZE_64 (64 / 8)


.equ OFFSET_PCREL__RIGHT_AFTER_CALL (2 * NUM_BYTES__SIZE_32)

start:
{
	// We don't need a pc-relative load in this case.
	ldu64 dsp, dzero, dzero, __var__stack_pointer
	ldu64 dfp, dzero, dzero, __var__frame_pointer



	.equ __LOCAL_STACK_SPACE (1 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP (0 * NUM_BYTES__SIZE_64)

	.equ __LOCAL_FP_OFFSET__COPY_OF_MAIN_RET_VAL \
		(-(1 * NUM_BYTES__SIZE_64))


	adds dfp, dzero, dsp
	addis dsp, dsp, -__LOCAL_STACK_SPACE




	.equ __CALL_MAIN_STACK_SPACE (2 * NUM_BYTES__SIZE_64)
	.equ __CALL_MAIN_SP_OFFSET__RETURN_VAL (0 * NUM_BYTES__SIZE_64)
	.equ __CALL_MAIN_SP_OFFSET__RETURN_ADDR (1 * NUM_BYTES__SIZE_64)


	addis dsp, dsp, -__CALL_MAIN_STACK_SPACE
	ldu64 dlr, dzero, dsp, __CALL_MAIN_SP_OFFSET__RETURN_ADDR

	addis dlr, pc, OFFSET_PCREL__RIGHT_AFTER_CALL
	bra main


__after_call_main:
	// Restore dfp
	addis dfp, dsp, (__CALL_MAIN_STACK_SPACE + __LOCAL_STACK_SPACE)


	// Copy main()'s return value to outside the partial stack frame
	ldu64 du3, dzero, dfp, __LOCAL_FP_OFFSET__COPY_OF_MAIN_RET_VAL
	ldu64 du1, dzero, dsp, __CALL_MAIN_SP_OFFSET__RETURN_VAL
	adds du3, dzero, du1


	// Restore dsp
	addis dsp, dsp, __CALL_MAIN_STACK_SPACE

__finish:
	sim_syscall du3, dzero, dzero, SYSC_DISP_DDEST_SCALAR_DATA
	sim_syscall dzero, dzero, dzero, SYSC_FINISH

__pool:
__const__addr_of_main:
	.db32 main

__vars:
__var__frame_pointer:
	.db64 0
__var__stack_pointer:
	.db64 0x10000
}


.org 0x1000
main:
{
	.equ __LOCAL_STACK_SPACE (1 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP (0 * NUM_BYTES__SIZE_64)


	.equ __LOCAL_FP_OFFSET__RETURN_VAL (0 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_FP_OFFSET__RETURN_ADDR (1 * NUM_BYTES__SIZE_64)
	adds dfp, dzero, dsp
	addis dsp, dsp, -__LOCAL_STACK_SPACE


	ldu64 du0, dzero, dfp, __LOCAL_FP_OFFSET__RETURN_VAL
	//adds du0, dzero, dzero

	addis du0, dzero, 0x123

	//ldu64 du1, dsp, dzero, __LOCAL_SP_OFFSET__TEMP

	//pcrels du1, __pool


__finish:
	addis dsp, dsp, __LOCAL_STACK_SPACE
	jmp dlr

__pool:
}
