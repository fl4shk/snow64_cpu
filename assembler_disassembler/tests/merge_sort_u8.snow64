.equ reg_dzero 0
.equ reg_du0 1
.equ reg_du1 2
.equ reg_du2 3
.equ reg_du3 4
.equ reg_du4 5
.equ reg_du5 6
.equ reg_du6 7
.equ reg_du7 8
.equ reg_du8 9
.equ reg_du9 10
.equ reg_du10 11
.equ reg_du11 12
.equ reg_dlr 13
.equ reg_dfp 14
.equ reg_dsp 15

//start:
//{
//	ldu32 dsp, dzero, dzero, const__above_top_of_stack
//	ldu8 dsp, dzero, dsp, 0
//
//	bra main
//}
//
//global_vars:
//var__start__sorted_data:
//	.space 8
//var__end__sorted_data:
//
//
//global_constants:
//const__above_top_of_stack:
//	.db32 0x10000
//
//const__start__data_to_sort:
//	.db8 3, 2, 6, 1, 9, 9, 4
//const__end__data_to_sort:
//const__align__data_to_sort:
//	.db8 0
//
//
//
//.org 0x1000
//main:
//{
//	// Space for du0 and dlr
//	.equ __stack_space (2 + 8)
//	.equ __const_offset__bottom_up_merge_sort_u8 \
//		(__const__addr__bottom_up_merge_sort_u8 - __constants)
//	.equ __const_offset__addresses__data_to_sort \
//		(__const__addresses__data_to_sort - __constants)
//	.equ __const_offset__addresses__sorted_data \
//		(__const__addresses__sorted_data - __constants)
//
//
//	ldu8 dfp, dsp, dzero, 0
//
//	ldu8 dsp, dsp, dzero, -__stack_space
//
//
//
//__constants:
//__const__addr__bottom_up_merge_sort_u8:
//	.db16 bottom_up_merge_sort_u8, 0
//
//__const__addresses__data_to_sort:
//	.db16 const__start__data_to_sort, const__end__data_to_sort
//
//__const__addresses__sorted_data:
//	.db16 var__start__sorted_data, var__end__sorted_data
//
//}
//
//.org 0x4000
//bottom_up_merge_sort_u8:
//{
//
//__constants:
//__const__addr__bottom_up_merge_u8:
//	.db16 bottom_up_merge_u8
//__const__addr__copy_array_u8:
//	.db16 copy_array_u8
//}


// void bottom_up_merge_u8(A[], iLeft, iRight, iEnd, B[])
bottom_up_merge_u8:
{
	.equ __fp_offset__A (-(8 * 4))
	.equ __fp_offset__iLeft (-(8 * 3))
	.equ __fp_offset__iRight (-(8 * 2))
	.equ __fp_offset__iEnd (-(8 * 1))
	.equ __fp_offset__B (-(8 * 0))


	.equ __stack_space (8 * 8)
	.equ __sp_offset__i (8 * 0)
	.equ __sp_offset__j (8 * 1)
	.equ __sp_offset__k (8 * 2)
	.equ __sp_offset__A_of_i (8 * 3)
	.equ __sp_offset__A_of_j (8 * 4)
	.equ __sp_offset__B_of_k (8 * 5)
	.equ __sp_offset__cmp_u64 (8 * 6)
	.equ __sp_offset__cmp_u8_0 ((8 * 7) + (0 * 1))
	.equ __sp_offset__cmp_u8_1 ((8 * 7) + (1 * 1))




	ldu8 dfp, dsp, dzero, 0

	ldu8 dsp, dsp, dzero, __stack_space


	.equ __addr__A reg_du0
	.equ __val__iLeft reg_du1
	.equ __val__iRight reg_du2
	.equ __val__iEnd reg_du3
	.equ __addr__B reg_du4

	.equ __val__i reg_du5
	.equ __val__j reg_du6
	.equ __val__k reg_du7
	.equ __val__B_indexed

	ldu64 __addr__A, dfp, dzero, __fp_offset__A
	ldu64 __val__iLeft, dfp, dzero, __fp_offset__iLeft
	ldu64 __val__iRight, dfp, dzero, __fp_offset__iRight
	ldu64 __val__iEnd, dfp, dzero, __fp_offset__iEnd
	ldu64 __addr__B, dfp, dzero, __fp_offset__B


	ldu64 __val__i, dsp, dzero, __sp_offset__i
	// i = iLeft;
	adds __val__i, dzero, __val__iLeft


	ldu64 __val__j, dsp, dzero, __sp_offset__j
	// j = iRight;
	adds __val__j, dzero, __val__iRight

	ldu64 __val__k, dsp, dzero, __sp_offset__k
	// k = iLeft;
	adds __val__k, dzero, __val__iLeft


	ldu8 dsp, dsp, dzero, __stack_space
	jmp dlr
}



// void copy_array_u8(B[], A[], n)
copy_array_u8:
{
	.equ __fp_offset__B (-(8 * 2))
	.equ __fp_offset__A (-(8 * 1))
	.equ __fp_offset__n (-(8 * 0))

	.equ __stack_space (8 * 2)
	.equ __sp_offset__i (8 * 0)
	.equ __sp_offset__temp (8 * 1)


	ldu8 dfp, dsp, dzero, 0

	ldu8 dsp, dsp, dzero, -__stack_space


	.equ __val__B_of_i reg_du0
	.equ __val__A_of_i reg_du1
	.equ __val__n reg_du2
	.equ __val__i reg_du3
	.equ __val__temp reg_du4


	ldu64 __val__B_of_i, dfp, dzero, __fp_offset__B
	ldu8 __val__B_of_i, dzero, __val__B_of_i, 0

	ldu64 __val__A_of_i, dfp, dzero, __fp_offset__A
	ldu8 __val__A_of_i, dzero, __val__A_of_i, 0

	ldu64 __val__n, dfp, dzero, __fp_offset__n


	ldu64 __val__i, dsp, dzero, __sp_offset__i
	ldu64 __val__temp, dsp, dzero, __sp_offset__temp

	// for (i=0; i<n; ++i)
	addis __val__i, __val__i, 0
loop_start:
	// if (i >= n) goto after_loop
	slts __val__temp, __val__i, __val__n
	bfal __val__temp, after_loop


	// A[i] = B[i];
	adds __val__A_of_i, dzero, __val__B_of_i

	// ++i;
	ldu8 __val__A_of_i, __val__A_of_i, dzero, 1
	ldu8 __val__B_of_i, __val__B_of_i, dzero, 1
	addis __val__i, __val__i, 1

	// goto loop_start
	bra loop_start
after_loop:


	ldu8 dsp, dsp, dzero, __stack_space
	jmp dlr
}
