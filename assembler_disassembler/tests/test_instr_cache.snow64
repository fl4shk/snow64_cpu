.equ reg_dzero 0
.equ REG_DU0 1
.equ REG_DU1 2
.equ REG_DU2 3
.equ REG_DU3 4
.equ REG_DU4 5
.equ REG_DU5 6
.equ REG_DU6 7
.equ REG_DU7 8
.equ REG_DU8 9
.equ REG_DU9 10
.equ REG_DU10 11
.equ REG_DU11 12
.equ REG_DLR 13
.equ REG_DFP 14
.equ REG_DSP 15

.equ SYSC_DISP_REGS 0
.equ SYSC_DISP_DDEST_VECTOR_DATA 1
.equ SYSC_DISP_DDEST_SCALAR_DATA 2
.equ SYSC_DISP_DDEST_ADDR 3
.equ SYSC_FINISH 4

.equ NUM_BYTES__SIZE_8 (8 / 8)
.equ NUM_BYTES__SIZE_16 (16 / 8)
.equ NUM_BYTES__SIZE_32 (32 / 8)
.equ NUM_BYTES__SIZE_64 (64 / 8)

//.equ CODE_ALIGN_AMOUNT 2
//.equ DATA_ALIGN_AMOUNT 5

.equ NUM_BYTES__LAR_DATA (4 * NUM_BYTES__SIZE_64)

.equ OFFSET_PCREL__RIGHT_AFTER_CALL (2 * NUM_BYTES__SIZE_32)

start:
{
	// We don't need a pc-relative load in this case.
	ldu32 du0, dzero, dzero, __const__above_top_of_stack
	ldu8 dsp, dzero, du0, 0



	.equ __LOCAL_STACK_SPACE NUM_BYTES__LAR_DATA
	.equ __LOCAL_SP_OFFSET__TEMP (0 * NUM_BYTES__SIZE_64)

	.equ __LOCAL_FP_OFFSET__COPY_OF_MAIN_RET_VAL \
		(-(1 * NUM_BYTES__SIZE_64))


	ldu8 dfp, dsp, dzero, 0
	ldu8 dsp, dsp, dzero, -__LOCAL_STACK_SPACE




	.equ __CALL_MAIN_STACK_SPACE (1 * NUM_BYTES__LAR_DATA)
	.equ __CALL_MAIN_SP_OFFSET__RETURN_VAL (-(0 * NUM_BYTES__SIZE_64))
	.equ __CALL_MAIN_SP_OFFSET__RETURN_ADDR (-(1 * NUM_BYTES__SIZE_64))


	ldu8 dsp, dsp, dzero, -__CALL_MAIN_STACK_SPACE


	ldu64 dlr, dsp, dzero, __CALL_MAIN_SP_OFFSET__RETURN_ADDR
	addis dlr, pc, OFFSET_PCREL__RIGHT_AFTER_CALL
	bra main


__after_call_main:
	// Restore dfp
	ldu8 dfp, dsp, dzero, (__CALL_MAIN_STACK_SPACE + __LOCAL_STACK_SPACE)


	// Copy main()'s return value to outside the partial stack frame
	ldu64 du3, dfp, dzero, __LOCAL_FP_OFFSET__COPY_OF_MAIN_RET_VAL
	ldu64 du1, dsp, dzero, __CALL_MAIN_SP_OFFSET__RETURN_VAL
	adds du3, dzero, du1


	// Restore dsp
	ldu8 dsp, dsp, dzero, __CALL_MAIN_STACK_SPACE

__finish:
	sim_syscall du3, dzero, dzero, SYSC_DISP_DDEST_SCALAR_DATA
	sim_syscall dzero, dzero, dzero, SYSC_FINISH

__pool:
__const__above_top_of_stack:
	.db32 0x10000
__const__addresses:
	.db16 main
}

.org .align2next(., DATA_ALIGN_AMOUNT)
global_constants:

.org .align2next(., DATA_ALIGN_AMOUNT)
global_vars:


.codealign
main:
{
	.equ __LOCAL_STACK_SPACE (1 * NUM_BYTES__LAR_DATA)
	.equ __LOCAL_SP_OFFSET__TEMP_0 (0 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP_1 (1 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP_2 (2 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP_3 (3 * NUM_BYTES__SIZE_64)


	.equ __LOCAL_FP_OFFSET__RETURN_VAL (-(0 * NUM_BYTES__SIZE_64))
	.equ __LOCAL_FP_OFFSET__RETURN_ADDR (-(1 * NUM_BYTES__SIZE_64))
	ldu8 dfp, dsp, dzero, 0
	ldu8 dsp, dsp, dzero, -__LOCAL_STACK_SPACE


	ldu64 du0, dfp, dzero, __LOCAL_FP_OFFSET__RETURN_VAL
	ldu64 du1, dsp, dzero, __LOCAL_SP_OFFSET__TEMP_0
	ldu64 du2, dsp, dzero, __LOCAL_SP_OFFSET__TEMP_1
	ldu64 du3, dsp, dzero, __LOCAL_SP_OFFSET__TEMP_2
	ldu64 du4, dsp, dzero, __LOCAL_SP_OFFSET__TEMP_3


	//pcrels du1, __pool
	//ldu16 du5, dzero, du1, (0 * NUM_BYTES__SIZE_16)
	//ldu16 du6, dzero, du1, (1 * NUM_BYTES__SIZE_16)

	// ret = ((9 << 3) * 57);
	addis du3, dzero, 9
	addis du2, dzero, 3
	shls du1, du3, du2

	addis du2, dzero, 57
	muls du0, du1, du2


__finish:
	ldu8 dsp, dsp, dzero, __LOCAL_STACK_SPACE
	jmp dlr

__pool:
}

.codealign
