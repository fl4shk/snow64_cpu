.equ reg_dzero 0
.equ reg_du0 1
.equ reg_du1 2
.equ reg_du2 3
.equ reg_du3 4
.equ reg_du4 5
.equ reg_du5 6
.equ reg_du6 7
.equ reg_du7 8
.equ reg_du8 9
.equ reg_du9 10
.equ reg_du10 11
.equ reg_du11 12
.equ reg_dlr 13
.equ reg_dfp 14
.equ reg_dsp 15

.equ syscall_disp_regs 0
.equ syscall_finish 1

.equ num_bytes__size_8 (8 / 8)
.equ num_bytes__size_16 (16 / 8)
.equ num_bytes__size_32 (32 / 8)
.equ num_bytes__size_64 (64 / 8)


start:
{
	//sim_syscall dzero, dzero, dzero, syscall_disp_regs
	//sim_syscall dzero, dzero, dzero, syscall_finish
	ldu32 dsp, dzero, dzero, __const__above_top_of_stack
	ldu8 dsp, dzero, dsp, 0

	bra main

__const_pool:
__const__above_top_of_stack:
	.db32 0x10000
}


main:
{
	.equ __stack_space 64
	.equ __sp_offset__output (0 * num_bytes__size_64)
	.equ __sp_offset__temp_0 (1 * num_bytes__size_64)
	.equ __sp_offset__temp_1 (2 * num_bytes__size_64)
	.equ __sp_offset__temp_2 (3 * num_bytes__size_64)



	.equ __local__output reg_du0
	.equ __local__temp_0 reg_du1
	.equ __local__temp_1 reg_du2
	.equ __local__temp_2 reg_du3

	.equ __var__temp_0 reg_du4
	.equ __var__temp_1 reg_du5


	ldu8 dfp, dsp, dzero, 0
	ldu8 dsp, dsp, dzero, -__stack_space

	ldu64 __local__output, dsp, dzero, __sp_offset__output
	ldu64 __local__temp_0, dsp, dzero, __sp_offset__temp_0
	ldu64 __local__temp_1, dsp, dzero, __sp_offset__temp_1
	ldu64 __local__temp_2, dsp, dzero, __sp_offset__temp_2


	addis __local__temp_0, dzero, 0x90
	addis __local__temp_1, dzero, 0x8
	shls __local__output, __local__temp_0, __local__temp_1


__finish:
	sim_syscall __local__temp_0, dzero, dzero, syscall_disp_regs
	sim_syscall __local__temp_1, dzero, dzero, syscall_disp_regs
	sim_syscall __local__output, dzero, dzero, syscall_disp_regs
	sim_syscall dzero, dzero, dzero, syscall_finish


.org 0x500
__const_pool:
	.db64 const__0x3
	.db64 const__0x9000


}
.org 0x5000
const__0x9000:
	.db64 0x9000

.org 0x6000
const__0x3:
	.db64 0x3
