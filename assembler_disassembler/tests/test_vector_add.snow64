.equ REG_DZERO 0
.equ REG_DU0 1
.equ REG_DU1 2
.equ REG_DU2 3
.equ REG_DU3 4
.equ REG_DU4 5
.equ REG_DU5 6
.equ REG_DU6 7
.equ REG_DU7 8
.equ REG_DU8 9
.equ REG_DU9 10
.equ REG_DU10 11
.equ REG_DU11 12
.equ REG_DLR 13
.equ REG_DFP 14
.equ REG_DSP 15

//.equ SYSC_DISP_REGS 0
//.equ SYSC_DISP_DDEST_VECTOR_DATA 1
//.equ SYSC_DISP_DDEST_SCALAR_DATA 2
//.equ SYSC_DISP_DDEST_ADDR 3
//.equ SYSC_FINISH 4

.equ NUM_BYTES__SIZE_8 (8 / 8)
.equ NUM_BYTES__SIZE_16 (16 / 8)
.equ NUM_BYTES__SIZE_32 (32 / 8)
.equ NUM_BYTES__SIZE_64 (64 / 8)

.equ NUM_LAR_ELEMS__SIZE_8 32
.equ NUM_LAR_ELEMS__SIZE_16 16
.equ NUM_LAR_ELEMS__SIZE_32 8
.equ NUM_LAR_ELEMS__SIZE_64 4

.equ NUM_BYTES__LAR_DATA (NUM_LAR_ELEMS__SIZE_8 * NUM_BYTES__SIZE_8)

.equ LOG2_OF_NUM_BYTES__SIZE_8 0
.equ LOG2_OF_NUM_BYTES__SIZE_16 1
.equ LOG2_OF_NUM_BYTES__SIZE_32 2
.equ LOG2_OF_NUM_BYTES__SIZE_64 3
.equ LOG2_OF_NUM_BYTES__LAR_DATA 5


start:
{
	// We don't need a pc-relative load in this case.
	ldu64 dsp, dzero, dzero, gvar__stack_pointer
	ldu64 dfp, dzero, dzero, gvar__frame_pointer

	//cpyis dfp, 0x234

	//sysc_disp_ddest_scalar_data dsp
	//sysc_disp_ddest_scalar_data dfp

	//sysc_disp_ddest_addr dsp
	//sysc_disp_ddest_addr dfp
	//sysc_finish

	.equ __LOCAL_STACK_SPACE NUM_BYTES__LAR_DATA
	.equ __LOCAL_SP_OFFSET__TEMP (0 * NUM_BYTES__SIZE_64)

	.equ __LOCAL_FP_OFFSET__COPY_OF_MAIN_RET_VAL \
		(-(1 * NUM_BYTES__SIZE_64))


	//ldu8 dfp, dsp, dzero, 0
	//ldu8 dsp, dsp, dzero, -__LOCAL_STACK_SPACE
	cpys dfp, dsp
	addis dsp, dsp, -__LOCAL_STACK_SPACE



	.equ __CALL_MAIN_STACK_SPACE (1 * NUM_BYTES__LAR_DATA)
	.equ __CALL_MAIN_SP_OFFSET__RETURN_ADDR (3 * NUM_BYTES__SIZE_64)
	.equ __CALL_MAIN_SP_OFFSET__RETURN_VAL (2 * NUM_BYTES__SIZE_64)


	addis dsp, dsp, -__CALL_MAIN_STACK_SPACE

	ldu64 dlr, dzero, dsp, __CALL_MAIN_SP_OFFSET__RETURN_ADDR

	bl main


__after_call_main:
	// Restore dfp
	addis dfp, dfp, (__CALL_MAIN_STACK_SPACE + __LOCAL_STACK_SPACE)


	// Copy main()'s return value to outside the partial stack frame
	ldu64 du3, dzero, dfp, __LOCAL_FP_OFFSET__COPY_OF_MAIN_RET_VAL
	ldu64 du1, dzero, dsp, __CALL_MAIN_SP_OFFSET__RETURN_VAL
	cpys du3, du1


	// Restore dsp
	addis dsp, dsp, __CALL_MAIN_STACK_SPACE

__finish:
	sysc_disp_ddest_scalar_data du3
	sysc_finish

__infin:
	bra __infin

.dataalign
__pool:

}

.equ ARR_SIZE__TO_ADD 10

.equ NUM_BYTES__TO_ADD (ARR_SIZE__TO_ADD * NUM_BYTES__SIZE_64)
.equ NUM_BYTES__TO_VECTOR_ADD .align2curr(NUM_BYTES__TO_ADD, \
	LOG2_OF_NUM_BYTES__LAR_DATA)
.equ NUM_BYTES__CAN_NOT_VECTOR_ADD (NUM_BYTES__TO_ADD \
	- NUM_BYTES__TO_VECTOR_ADD)

.equ NUM_ELEMS__TO_VECTOR_ADD (NUM_BYTES__TO_VECTOR_ADD \
	/ NUM_BYTES__SIZE_64)
.equ NUM_ELEMS__CAN_NOT_VECTOR_ADD (ARR_SIZE__TO_ADD \
	- NUM_ELEMS__TO_VECTOR_ADD)


.dataalign
global_constants:
gconst_to_add_arr_a:
	.db64 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9
.dataalign
gconst_to_add_arr_b:
	.db64 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19

.dataalign
global_vars:
gvar__stack_pointer:
	.db64 0x10000
gvar__frame_pointer:
	.db64 0

.dataalign
gvar_to_add_arr_c:
	.space (ARR_SIZE__TO_ADD * NUM_BYTES__SIZE_64)


.codealign
main:
{
	.equ __LOCAL_STACK_SPACE (1 * NUM_BYTES__LAR_DATA)
	.equ __LOCAL_SP_OFFSET__TEMP_0 (0 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP_1 (1 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP_2 (2 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP_3 (3 * NUM_BYTES__SIZE_64)


	.equ __LOCAL_FP_OFFSET__RETURN_ADDR (3 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_FP_OFFSET__RETURN_VAL (2 * NUM_BYTES__SIZE_64)
	cpys dfp, dsp
	addis dsp, dsp, -__LOCAL_STACK_SPACE



	.equ GC__TO_ADD_ARR_A REG_DU8
	.equ GC__TO_ADD_ARR_B REG_DU9
	.equ GV__TO_ADD_ARR_C REG_DU10


	ldu64 du0, dzero, dfp, __LOCAL_FP_OFFSET__RETURN_VAL
	ldu64 du1, dzero, dsp, __LOCAL_SP_OFFSET__TEMP_0
	ldu64 du2, dzero, dsp, __LOCAL_SP_OFFSET__TEMP_1
	ldu64 du3, dzero, dsp, __LOCAL_SP_OFFSET__TEMP_2
	ldu64 du4, dzero, dsp, __LOCAL_SP_OFFSET__TEMP_3


	.equ __LOCAL_POOL_OFFSET__TO_ADD_ARR_A (0 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_POOL_OFFSET__TO_ADD_ARR_B (1 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_POOL_OFFSET__TO_ADD_ARR_C (2 * NUM_BYTES__SIZE_64)



	pcrels du0, __pool
	ldu64 du5, dzero, du0, __LOCAL_POOL_OFFSET__TO_ADD_ARR_A
	ldu64 du6, dzero, du0, __LOCAL_POOL_OFFSET__TO_ADD_ARR_B
	ldu64 du7, dzero, du0, __LOCAL_POOL_OFFSET__TO_ADD_ARR_C

	ldu64 du5, dzero, du5, 0
	ldu64 du6, dzero, du6, 0
	ldu64 du7, dzero, du7, 0


	.equ V__I REG_DU1

	sysc_disp_ddest_addr du5
	sysc_disp_ddest_addr du6
	sysc_disp_ddest_addr du7

	//// Scalar add
	//{
	//	ldu64 GC__TO_ADD_ARR_A, du5, dzero, 0
	//	ldu64 GC__TO_ADD_ARR_B, du6, dzero, 0
	//	ldu64 GV__TO_ADD_ARR_C, du7, dzero, 0
	//	//ldu64 GC__TO_ADD_ARR_A, dzero, du5, 0
	//	//ldu64 GC__TO_ADD_ARR_B, dzero, du6, 0
	//	//ldu64 GV__TO_ADD_ARR_C, dzero, du7, 0

	//	sysc_disp_ddest_addr du8
	//	sysc_disp_ddest_addr du9
	//	sysc_disp_ddest_addr du10

	//	sysc_disp_ddest_vector_data du8
	//	sysc_disp_ddest_vector_data du9
	//	sysc_disp_ddest_vector_data du10


	//	// for (i=ARR_SIZE__TO_ADD; i!=0; --i)
	//	// i = ARR_SIZE__TO_ADD;
	//	cpyis V__I, ARR_SIZE__TO_ADD
	//	__loop:
	//	{
	//		// *c = *a + *b;
	//		adds GV__TO_ADD_ARR_C, GC__TO_ADD_ARR_A, GC__TO_ADD_ARR_B

	//		// ++c;
	//		ldu64 GV__TO_ADD_ARR_C, GV__TO_ADD_ARR_C, dzero, \
	//			NUM_BYTES__SIZE_64
	//		// ++a;
	//		ldu64 GC__TO_ADD_ARR_A, GC__TO_ADD_ARR_A, dzero, \
	//			NUM_BYTES__SIZE_64
	//		// ++b;
	//		ldu64 GC__TO_ADD_ARR_B, GC__TO_ADD_ARR_B, dzero, \
	//			NUM_BYTES__SIZE_64


	//		// --i;
	//		addis V__I, V__I, -1

	//		// if (i != 0) goto __loop
	//		btru V__I, __loop
	//	}
	//}

	//// Display and clear c
	//{
	//	ldu64 GV__TO_ADD_ARR_C, du7, dzero, 0

	//	// for (i=ARR_SIZE__TO_ADD; i!=0; --i)
	//	// i = ARR_SIZE__TO_ADD;
	//	cpyis V__I, ARR_SIZE__TO_ADD
	//	__loop:
	//	{
	//		sysc_disp_ddest_scalar_data GV__TO_ADD_ARR_C

	//		// Clear it
	//		cpys GV__TO_ADD_ARR_C, dzero
	//		ldu64 GV__TO_ADD_ARR_C, GV__TO_ADD_ARR_C, dzero, \
	//			NUM_BYTES__SIZE_64


	//		// --i;
	//		addis V__I, V__I, -1

	//		// if (i != 0) goto __loop
	//		btru V__I, __loop
	//	}
	//}

	//sysc_disp_ddest_vector_data dzero

	//// Display c
	//{
	//	ldu64 GV__TO_ADD_ARR_C, du7, dzero, 0


	//	// for (i=ARR_SIZE__TO_ADD; i!=0; --i)
	//	// i = ARR_SIZE__TO_ADD;
	//	cpyis V__I, ARR_SIZE__TO_ADD
	//	__loop:
	//	{
	//		sysc_disp_ddest_scalar_data GV__TO_ADD_ARR_C

	//		ldu64 GV__TO_ADD_ARR_C, GV__TO_ADD_ARR_C, dzero, \
	//			NUM_BYTES__SIZE_64


	//		// --i;
	//		addis V__I, V__I, -1

	//		// if (i != 0) goto __loop
	//		btru V__I, __loop
	//	}
	//}

	sysc_disp_ddest_vector_data dzero

	// Vector add
	{
		ldu64 GC__TO_ADD_ARR_A, du5, dzero, 0
		ldu64 GC__TO_ADD_ARR_B, du6, dzero, 0
		ldu64 GV__TO_ADD_ARR_C, du7, dzero, 0

		// for (i=ARR_SIZE__TO_ADD; i!=0; --i)
		// i = ARR_SIZE__TO_ADD;
		cpyis V__I, NUM_ELEMS__TO_VECTOR_ADD
		__loop:
		{
			//sysc_disp_ddest_vector_data GV__TO_ADD_ARR_C
			sysc_disp_ddest_addr GV__TO_ADD_ARR_C
			addv GV__TO_ADD_ARR_C, GC__TO_ADD_ARR_A, GC__TO_ADD_ARR_B
			sysc_disp_ddest_vector_data GV__TO_ADD_ARR_C

			ldu64 GV__TO_ADD_ARR_C, GV__TO_ADD_ARR_C, dzero, \
				NUM_BYTES__LAR_DATA
			ldu64 GC__TO_ADD_ARR_A, GC__TO_ADD_ARR_A, dzero, \
				NUM_BYTES__LAR_DATA
			ldu64 GC__TO_ADD_ARR_B, GC__TO_ADD_ARR_B, dzero, \
				NUM_BYTES__LAR_DATA

			// i -= 4;
			addis V__I, V__I, -NUM_LAR_ELEMS__SIZE_64

			// if (i != 0) goto __loop
			btru V__I, __loop
		}
		
	}

	sysc_disp_ddest_vector_data dzero

	// Display c
	{
		ldu64 GV__TO_ADD_ARR_C, du7, dzero, 0
		sysc_disp_ddest_addr GV__TO_ADD_ARR_C


		// for (i=ARR_SIZE__TO_ADD; i!=0; --i)
		// i = ARR_SIZE__TO_ADD;
		cpyis V__I, ARR_SIZE__TO_ADD
		__loop:
		{
			sysc_disp_ddest_vector_data GV__TO_ADD_ARR_C
			//sysc_disp_ddest_scalar_data GV__TO_ADD_ARR_C

			ldu64 GV__TO_ADD_ARR_C, GV__TO_ADD_ARR_C, dzero, \
				NUM_BYTES__SIZE_64


			// --i;
			addis V__I, V__I, -1

			// if (i != 0) goto __loop
			btru V__I, __loop
		}
	}


__finish:
	addis dsp, dsp, __LOCAL_STACK_SPACE
	jmp dlr


.dataalign
__pool:
	.db64 gconst_to_add_arr_a
	.db64 gconst_to_add_arr_b
	.db64 gvar_to_add_arr_c
}


//.org 0x9000
//.dataalign
//test:
//	//.db32 .align2curr(ARR_SIZE__TO_ADD, 2)
//	.db32 NUM_BYTES__TO_ADD
//	.db32 NUM_BYTES__TO_VECTOR_ADD
//	.db32 NUM_BYTES__CAN_NOT_VECTOR_ADD
//	.db32 ARR_SIZE__TO_ADD
//	.db32 NUM_ELEMS__TO_VECTOR_ADD
//	.db32 NUM_ELEMS__CAN_NOT_VECTOR_ADD
