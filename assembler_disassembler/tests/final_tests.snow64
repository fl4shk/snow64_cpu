.equ REG_DZERO 0
.equ REG_DU0 1
.equ REG_DU1 2
.equ REG_DU2 3
.equ REG_DU3 4
.equ REG_DU4 5
.equ REG_DU5 6
.equ REG_DU6 7
.equ REG_DU7 8
.equ REG_DU8 9
.equ REG_DU9 10
.equ REG_DU10 11
.equ REG_DU11 12
.equ REG_DLR 13
.equ REG_DFP 14
.equ REG_DSP 15

//.equ SYSC_DISP_REGS 0
//.equ SYSC_DISP_DDEST_VECTOR_DATA 1
//.equ SYSC_DISP_DDEST_SCALAR_DATA 2
//.equ SYSC_DISP_DDEST_ADDR 3
//.equ SYSC_FINISH 4

.equ NUM_BYTES__SIZE_8 (8 / 8)
.equ NUM_BYTES__SIZE_16 (16 / 8)
.equ NUM_BYTES__SIZE_32 (32 / 8)
.equ NUM_BYTES__SIZE_64 (64 / 8)

.equ NUM_LAR_ELEMS__SIZE_8 32
.equ NUM_LAR_ELEMS__SIZE_16 16
.equ NUM_LAR_ELEMS__SIZE_32 8
.equ NUM_LAR_ELEMS__SIZE_64 4

.equ NUM_BYTES__LAR_DATA (NUM_LAR_ELEMS__SIZE_64 * NUM_BYTES__SIZE_64)

.equ LOG2_OF_NUM_BYTES__SIZE_8 0
.equ LOG2_OF_NUM_BYTES__SIZE_16 1
.equ LOG2_OF_NUM_BYTES__SIZE_32 2
.equ LOG2_OF_NUM_BYTES__SIZE_64 3
.equ LOG2_OF_NUM_BYTES__LAR_DATA 5

start:
{
	// We don't need a pc-relative load in this case.
	ldu64 dsp, dzero, dzero, gvar__stack_pointer
	ldu64 dfp, dzero, dzero, gvar__frame_pointer


	.equ __LOCAL_STACK_SPACE (1 * NUM_BYTES__LAR_DATA)
	.equ __LOCAL_SP_OFFSET__TEMP_0 (0 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP_1 (1 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP_2 (2 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP_3 (3 * NUM_BYTES__SIZE_64)

	.equ __LOCAL_FP_OFFSET__COPY_OF_MAIN_RET_VAL \
		(-(1 * NUM_BYTES__SIZE_64))


	//ldu8 dfp, dsp, dzero, 0
	//ldu8 dsp, dsp, dzero, -__LOCAL_STACK_SPACE
	cpys dfp, dsp
	addis dsp, dsp, -__LOCAL_STACK_SPACE



	.equ __CALL_MAIN_STACK_SPACE (1 * NUM_BYTES__LAR_DATA)
	.equ __CALL_MAIN_SP_OFFSET__RETURN_ADDR (3 * NUM_BYTES__SIZE_64)
	.equ __CALL_MAIN_SP_OFFSET__RETURN_VAL (2 * NUM_BYTES__SIZE_64)


	addis dsp, dsp, -__CALL_MAIN_STACK_SPACE

	ldu64 dlr, dzero, dsp, __CALL_MAIN_SP_OFFSET__RETURN_ADDR

	bl main


__after_call_main:
	// Restore dfp
	addis dfp, dfp, (__CALL_MAIN_STACK_SPACE + __LOCAL_STACK_SPACE)


	// Copy main()'s return value to outside the partial stack frame
	ldu64 du3, dzero, dfp, __LOCAL_FP_OFFSET__COPY_OF_MAIN_RET_VAL
	ldu64 du1, dzero, dsp, __CALL_MAIN_SP_OFFSET__RETURN_VAL
	cpys du3, du1


	// Restore dsp
	addis dsp, dsp, __CALL_MAIN_STACK_SPACE

__finish:
	sysc_disp_ddest_scalar_data du3
	sysc_finish

__infin:
	bra __infin

__pool:

}

.dataalign
global_constants:

.dataalign
global_vars:
gvar__stack_pointer:
	.db64 0x10000
gvar__frame_pointer:
	.db64 0


.codealign
main:
{
	.equ __LOCAL_STACK_SPACE (3 * NUM_BYTES__LAR_DATA)
	.equ __LOCAL_SP_OFFSET__TEMP_0 \
		((0 * NUM_BYTES__SIZE_64) + (0 * NUM_BYTES__LAR_DATA))
	.equ __LOCAL_SP_OFFSET__TEMP_1 \
		((1 * NUM_BYTES__SIZE_64) + (0 * NUM_BYTES__LAR_DATA))
	.equ __LOCAL_SP_OFFSET__TEMP_2 \
		((2 * NUM_BYTES__SIZE_64) + (0 * NUM_BYTES__LAR_DATA))
	.equ __LOCAL_SP_OFFSET__TEMP_3 \
		((3 * NUM_BYTES__SIZE_64) + (0 * NUM_BYTES__LAR_DATA))
	.equ __LOCAL_SP_OFFSET__TEMP_4 \
		((0 * NUM_BYTES__SIZE_64) + (1 * NUM_BYTES__LAR_DATA))
	.equ __LOCAL_SP_OFFSET__TEMP_5 \
		((1 * NUM_BYTES__SIZE_64) + (1 * NUM_BYTES__LAR_DATA))
	.equ __LOCAL_SP_OFFSET__TEMP_6 \
		((2 * NUM_BYTES__SIZE_64) + (1 * NUM_BYTES__LAR_DATA))
	.equ __LOCAL_SP_OFFSET__TEMP_7 \
		((3 * NUM_BYTES__SIZE_64) + (1 * NUM_BYTES__LAR_DATA))
	.equ __LOCAL_SP_OFFSET__FLOAT_VEC_C (2 * NUM_BYTES__LAR_DATA)


	.equ __LOCAL_FP_OFFSET__RETURN_ADDR (3 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_FP_OFFSET__RETURN_VAL (2 * NUM_BYTES__SIZE_64)
	cpys dfp, dsp
	addis dsp, dsp, -__LOCAL_STACK_SPACE




	ldu64 du0, dzero, dfp, __LOCAL_FP_OFFSET__RETURN_VAL

	//ldf16 du1, dzero, dsp, __LOCAL_SP_OFFSET__TEMP_0
	//ldf16 du2, dzero, dsp, __LOCAL_SP_OFFSET__TEMP_1
	//ldf16 du3, dzero, dsp, __LOCAL_SP_OFFSET__TEMP_2
	//ldf16 du4, dzero, dsp, __LOCAL_SP_OFFSET__TEMP_3


	pcrels du0, __pool
	//ldu16 du1, dzero, du0, (__data_a - __pool) + (0 * NUM_BYTES__SIZE_16)
	//ldu16 du2, dzero, du0, (__data_a - __pool) + (1 * NUM_BYTES__SIZE_16)

	//.equ V__I REG_DU1
	.equ V__FLOAT_VEC_A REG_DU2
	.equ V__FLOAT_VEC_B REG_DU3
	.equ V__FLOAT_VEC_C REG_DU4
	.equ V__FLOAT_VEC_ORACLE REG_DU5


	//ldu64 V__I, dzero, dsp, __LOCAL_SP_OFFSET__TEMP_0
	ldf16 V__FLOAT_VEC_A, dzero, du0, (__float_data_a - __pool)
	ldf16 V__FLOAT_VEC_B, dzero, du0, (__float_data_b - __pool)
	ldf16 V__FLOAT_VEC_C, dzero, dsp, __LOCAL_SP_OFFSET__FLOAT_VEC_C
	ldf16 V__FLOAT_VEC_ORACLE, dzero, du0, (__float_data_oracle - __pool)


	// compute V__FLOAT_VEC_C
	addv V__FLOAT_VEC_C, V__FLOAT_VEC_A, V__FLOAT_VEC_B

	sysc_disp_ddest_vector_data V__FLOAT_VEC_C
	sysc_disp_ddest_vector_data V__FLOAT_VEC_ORACLE




__finish:
	addis dsp, dsp, __LOCAL_STACK_SPACE
	jmp dlr


.dataalign
__pool:

__float_data_a:
	.db16 0x9d6e, 0xe808, 0xebca, 0x41a
	.db16 0x509e, 0xbf1c, 0x18ca, 0x20e8
	.db16 0xd6c4, 0xdb72, 0x73a4, 0x40f0
	.db16 0x3640, 0x9537, 0xa5e2, 0xf9f5

__float_data_b:
	.db16 0xda11, 0xdc8e, 0x7246, 0x384b
	.db16 0xcb8e, 0x44d7, 0xb3c1, 0x7e24
	.db16 0x9192, 0x543e, 0x204b, 0xb0f9
	.db16 0x74cf, 0xa669, 0xcb9c, 0x169d

__float_data_oracle:
	.db16 0xda11, 0xe808, 0x7245, 0x384b
	.db16 0x509d, 0x44d6, 0xb3c0, 0x7e24
	.db16 0xd6c4, 0xdb71, 0x73a4, 0x40ef
	.db16 0x74cf, 0xa669, 0xcb9c, 0xf9f4


//.dataalign
//__data_for_div_0:
//	.db32 0x349300
//	.db8 0x12
//
//.dataalign
//__data_for_div_1:
//	.db16 -3519
//	.db8 200
}
