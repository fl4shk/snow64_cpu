.equ REG_DZERO 0
.equ REG_DU0 1
.equ REG_DU1 2
.equ REG_DU2 3
.equ REG_DU3 4
.equ REG_DU4 5
.equ REG_DU5 6
.equ REG_DU6 7
.equ REG_DU7 8
.equ REG_DU8 9
.equ REG_DU9 10
.equ REG_DU10 11
.equ REG_DU11 12
.equ REG_DLR 13
.equ REG_DFP 14
.equ REG_DSP 15

//.equ SYSC_DISP_REGS 0
//.equ SYSC_DISP_DDEST_VECTOR_DATA 1
//.equ SYSC_DISP_DDEST_SCALAR_DATA 2
//.equ SYSC_DISP_DDEST_ADDR 3
//.equ SYSC_FINISH 4

.equ NUM_BYTES__SIZE_8 (8 / 8)
.equ NUM_BYTES__SIZE_16 (16 / 8)
.equ NUM_BYTES__SIZE_32 (32 / 8)
.equ NUM_BYTES__SIZE_64 (64 / 8)

.equ NUM_LAR_ELEMS__SIZE_8 32
.equ NUM_LAR_ELEMS__SIZE_16 16
.equ NUM_LAR_ELEMS__SIZE_32 8
.equ NUM_LAR_ELEMS__SIZE_64 4

.equ NUM_BYTES__LAR_DATA (NUM_LAR_ELEMS__SIZE_64 * NUM_BYTES__SIZE_64)

.equ LOG2_OF_NUM_BYTES__SIZE_8 0
.equ LOG2_OF_NUM_BYTES__SIZE_16 1
.equ LOG2_OF_NUM_BYTES__SIZE_32 2
.equ LOG2_OF_NUM_BYTES__SIZE_64 3
.equ LOG2_OF_NUM_BYTES__LAR_DATA 5

start:
{
	// We don't need a pc-relative load in this case.
	ldu64 dsp, dzero, dzero, gvar__stack_pointer
	ldu64 dfp, dzero, dzero, gvar__frame_pointer


	.equ __LOCAL_STACK_SPACE NUM_BYTES__LAR_DATA
	.equ __LOCAL_SP_OFFSET__TEMP (0 * NUM_BYTES__SIZE_64)

	.equ __LOCAL_FP_OFFSET__COPY_OF_MAIN_RET_VAL \
		(-(1 * NUM_BYTES__SIZE_64))


	//ldu8 dfp, dsp, dzero, 0
	//ldu8 dsp, dsp, dzero, -__LOCAL_STACK_SPACE
	cpys dfp, dsp
	addis dsp, dsp, -__LOCAL_STACK_SPACE



	.equ __CALL_MAIN_STACK_SPACE (1 * NUM_BYTES__LAR_DATA)
	.equ __CALL_MAIN_SP_OFFSET__RETURN_ADDR (3 * NUM_BYTES__SIZE_64)
	.equ __CALL_MAIN_SP_OFFSET__RETURN_VAL (2 * NUM_BYTES__SIZE_64)


	addis dsp, dsp, -__CALL_MAIN_STACK_SPACE

	ldu64 dlr, dzero, dsp, __CALL_MAIN_SP_OFFSET__RETURN_ADDR

	bl main


__after_call_main:
	// Restore dfp
	addis dfp, dfp, (__CALL_MAIN_STACK_SPACE + __LOCAL_STACK_SPACE)


	// Copy main()'s return value to outside the partial stack frame
	ldu64 du3, dzero, dfp, __LOCAL_FP_OFFSET__COPY_OF_MAIN_RET_VAL
	ldu64 du1, dzero, dsp, __CALL_MAIN_SP_OFFSET__RETURN_VAL
	cpys du3, du1


	// Restore dsp
	addis dsp, dsp, __CALL_MAIN_STACK_SPACE

__finish:
	sysc_disp_ddest_scalar_data du3
	sysc_finish

__infin:
	bra __infin

__pool:

}

.dataalign
global_constants:

.dataalign
global_vars:
gvar__stack_pointer:
	.db64 0x10000
gvar__frame_pointer:
	.db64 0


.codealign
main:
{
	.equ __LOCAL_STACK_SPACE (2 * NUM_BYTES__LAR_DATA)
	.equ __LOCAL_SP_OFFSET__TEMP_0 (0 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP_1 (1 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP_2 (2 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP_3 (3 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_SP_OFFSET__TEMP_4 (4 * NUM_BYTES__SIZE_64)


	.equ __LOCAL_FP_OFFSET__RETURN_ADDR (3 * NUM_BYTES__SIZE_64)
	.equ __LOCAL_FP_OFFSET__RETURN_VAL (2 * NUM_BYTES__SIZE_64)
	cpys dfp, dsp
	addis dsp, dsp, -__LOCAL_STACK_SPACE



	ldu64 du0, dzero, dfp, __LOCAL_FP_OFFSET__RETURN_VAL
	ldu64 du1, dzero, dsp, __LOCAL_SP_OFFSET__TEMP_0
	lds64 du2, dzero, dsp, __LOCAL_SP_OFFSET__TEMP_1
	ldu64 du3, dzero, dsp, __LOCAL_SP_OFFSET__TEMP_2
	ldu64 du4, dzero, dsp, __LOCAL_SP_OFFSET__TEMP_3
	ldf16 du5, dzero, dsp, __LOCAL_SP_OFFSET__TEMP_4



	pcrels du0, __data_for_div_0

	ldu32 du6, dzero, du0, 0
	ldu8 du7, du6, dzero, NUM_BYTES__SIZE_32

	cpys du3, du6
	cpys du4, du7
	cpys du5, du7

	sysc_disp_ddest_scalar_data du3
	sysc_disp_ddest_scalar_data du5
	sysc_disp_ddest_scalar_data du6
	sysc_disp_ddest_scalar_data du7

	muls du1, du3, du4
	sysc_disp_ddest_scalar_data du1




	lds16 du8, dzero, du0, (__data_for_div_1 - __data_for_div_0)
	ldu8 du9, du8, dzero, NUM_BYTES__SIZE_16

	cpys du3, du8
	cpys du4, du9


	divs du2, du3, du4
	sysc_disp_ddest_scalar_data du2

	adds du0, du1, du2



__finish:
	addis dsp, dsp, __LOCAL_STACK_SPACE
	jmp dlr




.dataalign
__pool:


.dataalign
__data_for_div_0:
	.db32 0x349300
	.db8 0x12

.dataalign
__data_for_div_1:
	.db16 -3519
	.db8 200
}
